package edu.dominio.empresa;

import edu.dominio.usuario.Cliente;
import edu.dominio.usuario.RestriccionConsumo;
import edu.dominio.empresa.DispositivoEstandar;
import edu.dominio.empresa.DispositivoInteligente;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import java.util.ArrayList;
import java.util.List;

public class LlamarSimplex {
	private RestriccionConsumo maxima;
	
	public double generarRecomendacion(Cliente cliente) {
		this.CrearSCV(realizarCalculos(cliente));
		if (cliente.getAhorroAutomatico()) {
			this.mejorarEficienciaHogar(cliente);
		}

		return this.ejecutarSimplex();
	}

	public void mejorarEficienciaHogar(Cliente c) {
		// TODO FACU - AutoGenerated method sub. (?
	}

	private double ejecutarSimplex() {
		SimplexSolver solver = new SimplexSolver();
		SimplexProblem problema = new SimplexProblem();
		problema.parse(leerContenido("Melipath/problema.csv"));
		return solver.solve(problema);
	}

	private String leerContenido(String ruta) {
		Path path = Paths.get(ruta);
		String contenido = "";
		try {
			contenido = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return contenido;
	}

	private String realizarCalculos(Cliente cliente)
	{
		// Se calcula las variables para el simplex
		int cantDispositivos = cliente.cantDispositivosEnTotal();
				
		int cantRestricciones = 1 + cantDispositivos * 2; // el no negatividad no lo hago no? porque el menor y mayor ya me dan el limite
				
		List<String> coefDispositivos = new ArrayList<String>();
		List<Dispositivo> dispositivos = cliente.todosSusDispositivos();
		dispositivos.forEach(dispositivo -> coefDispositivos.add(String.valueOf(dispositivo.calcularConsumo())));
		
		List<String> bools = new ArrayList<String>();	
		coefDispositivos.forEach(coefDispositivo -> {
			if(Double.parseDouble(coefDispositivo) >= 0)
				bools.add("true");
			else
				bools.add("false");
		});
				
			
			// Se crea las restricciones de cada dispositivo en un array 
		List<String> restriccionesDispositivos = new ArrayList<String>();
		
		
		dispositivos.forEach(dispositivo -> {
			int dispositivoActual = 1;
			for(int j = 0; j < 2; j++){
				for(int k = 0; k < cantDispositivos+2; k++){
					if(k == 0 && j == 0){
						restriccionesDispositivos.add(dispositivo.getMinima().getTipoRestriccion());

					}

					else if(k == 0 && j == 1){
						restriccionesDispositivos.add(dispositivo.getMaxima().getTipoRestriccion());
					}

					else if(k == dispositivoActual){
						restriccionesDispositivos.add("1");
					}

					else if(k == (cantDispositivos+1) && j == 0){
						restriccionesDispositivos.add(String.valueOf(dispositivo.getMinima().getValor()));
						restriccionesDispositivos.add("\n");
					}

					else if(k == (cantDispositivos+1) && j == 1){
						restriccionesDispositivos.add(String.valueOf(dispositivo.getMaxima().getValor()));
						restriccionesDispositivos.add("\n");
					}

					else{
						restriccionesDispositivos.add("0");
					}
				}
			}
		dispositivoActual++;
		});
				
				// Se crea el problema 
				List<String> problema = new ArrayList<String>();
				
				problema.add(String.valueOf(cantDispositivos));
				problema.add(String.valueOf(cantRestricciones));
				problema.add("\n");
				problema.add("max");
				problema.add(String.join(";", coefDispositivos));
				problema.add("0");
				problema.add("\n");
				problema.add(String.join(";", bools));
				problema.add("\n");
				problema.add(this.maxima.getTipoRestriccion());
				problema.add(String.join(";", coefDispositivos));
				problema.add(String.valueOf(this.maxima.getValor()));
				problema.add(String.join(";", restriccionesDispositivos));

				return String.join(";", problema);
	}

	private void CrearSCV (String problema)
	{
		File archivo = new File("C:/Users/Melisa/git/Verdadero/2018-vn-group-10/problema.csv");
		try {
		FileWriter escritor = new FileWriter(archivo,true);
		escritor.write(problema);
		escritor.close();
		
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}