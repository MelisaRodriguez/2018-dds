package edu.dominio.empresa;

import edu.dominio.usuario.Cliente;
import edu.dominio.usuario.RestriccionConsumo;
import edu.dominio.empresa.DispositivoEstandar;
import edu.dominio.empresa.DispositivoInteligente;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import java.util.ArrayList;
import java.util.List;


public class LlamarSimplex {
	private double restriccionMaxima;
	
	public LlamarSimplex(double restriccionMaxima) {
		this.restriccionMaxima = restriccionMaxima;
	}
	
	public double generarRecomendacion(Cliente cliente) {
	
		if (cliente.getAhorroAutomatico()) {
			this.mejorarEficienciaHogar(cliente);
		}

		return this.ejecutarSimplex(cliente);
	}

	public void mejorarEficienciaHogar(Cliente c) {
		// TODO FACU - AutoGenerated method sub. (?
	}

	private double ejecutarSimplex(Cliente cliente) {
		Simplex solver = new SimplexSolver();
		
		new LinealObjetiveFuncion(this.listaDispositivosUnos(cliente.cantDispositivosEnTotal()), 0);
		
		List<LinearConstraint> restricciones = new ArrayList<LinearConstraint()>; 
		
		new LinealConstaint(dispositivos.mapToDouble(dispositivo -> dispositivo.getPotencia()).toArray(), Relationship.LEQ, this.maxima);
	
		int dispositivoActual = 0;
		dispositivos.forEach(dispositivo -> {
			restricciones.add(new LinealConstaint(this.listaRestriccion(dispositivoActual, cliente.cantDispositivosEnTotal()), Relationship.GEQ, dispositivo.getRestriccionMinima()));
			restricciones.add(new LinealConstaint(this.listaRestriccion(dispositivoActual, cliente.cantDispositivosEnTotal()), Relationship.LEQ, dispositivo.getRestriccionMaxima()));
			
			dispositivoActual++;
		});
		
		// TODO falta invocar al simplex
		
		return ??;
	}
	
	private List<Integer> listaDispositivosUnos(int cantDispositivos){
		// no se si la mejor opcion sea hacer un for, pero no se me ocurre otra cosa
		List<Integer> lista = new ArrayList<Integer>();
		for(int i = 0; i < cantDispositivos; i++) {
			lista.add(1);
		}
		return lista;
	}
	
	private List<Integer> listaRestriccion(int dispositivoActual, int cantDispositivos){
		List<Integer> lista = new ArrayList<Integer>();
		for(int i = 0; i < cantDispositivos; i++) {
			if(dispositivoActual == i)
				lista.add(1);
			else
				lista.add(0);
		}
		return lista;
	}

}